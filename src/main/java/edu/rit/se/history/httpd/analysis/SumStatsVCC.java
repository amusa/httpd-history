package edu.rit.se.history.httpd.analysis;

import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;
import org.chaoticbits.devactivity.DBUtil;
import org.chaoticbits.devactivity.PropsLoader;
import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;

import com.mysql.jdbc.Connection;

	/*
	 * By Brian Spates
	 * Class produces summary statistics of the VCC to CVE mappings. Those included are:
	 * Average Time (in days) a vulnerability was open 
	 * Number of Vulnerabilities in sample
	 * Number of VCCs in sample
	 * Number of VCCs that contributed to multiple Vulnerabilities
	 * Number of VCCs that were also fixes for another Vulnerability
	 * 
	 */
public class SumStatsVCC {
	private static Logger log = Logger.getLogger(SumStatsVCC.class);
	private final DBUtil dbUtil;
	private final Properties props;
	private File datadir;
	private SummaryStatistics ss = new SummaryStatistics();
	
	public static void main(String[] args) throws Exception
	{
		//Query Strings to be passed to computeSumOf()
		String numOfRegresVccQ = "SELECT COUNT(DISTINCT a.CommitIntroduced) FROM cvetogit a JOIN cvetogit b WHERE a.CommitIntroduced = b.CommitFixed",
				numOfVulnQ = "SELECT COUNT(DISTINCT CVE) FROM cvetogit",
				numOfVccQ = "SELECT COUNT(CVE) FROM cvetogit WHERE CommitIntroduced != 'N/A' ";

		SumStatsVCC ssv = new SumStatsVCC();
		log.info("Time Vulnerable \n" + ssv.computeAvgTimeVulnerable());
		log.info("Number of VCCs that were fixes for other vulnerabilities " + ssv.computeSumOf(numOfRegresVccQ));
		log.info("Total number of VCCs that contributed to multiple vulnerabilities " + ssv.computeSumOfMultiVulnVcc().size());
		log.info("Total number of CVEs in sample " + ssv.computeSumOf(numOfVulnQ));
		log.info("Total number of VCCs in sample " + ssv.computeSumOf(numOfVccQ));
	}
	
	public SumStatsVCC() throws Exception
	{
		this.props = setUpProps();
		this.dbUtil = setUpDB(props);
	}

	/*
	 * Method returns the StatSummary object generated by SummaryStatistics class from apache commons 
	 * This includes mean, max, min, standard deviation, sample variance, and number. 
	 */
	public StatisticalSummary computeAvgTimeVulnerable() throws Exception
	{
		Connection conn = dbUtil.getConnection();
		Statement statement = conn.createStatement();
		ResultSet commits = statement.executeQuery("SELECT DISTINCT CVE, CommitIntroduced, CommitFixed FROM cvetogit WHERE CommitIntroduced != 'N/A' GROUP BY CVE ORDER BY CVE");
		ResultSet rs;
		int sum = 0, count = 0;
		while(commits.next())
		{
			PreparedStatement ps = conn.prepareStatement("SELECT TIMESTAMPDIFF(DAY, (SELECT AuthorDate FROM gitlog WHERE Commit = ?), (SELECT AuthorDate FROM gitlog WHERE Commit = ?))");
			ps.setString(1, commits.getString("CommitIntroduced"));
			ps.setString(2, commits.getString("CommitFixed"));
			
			rs = ps.executeQuery();
			rs.next();
			String temp = rs.getString(1);
			if(temp != null)
			{
				ss.addValue(Integer.parseInt(temp));
			}
		}
		
		return ss.getSummary();
	}
	
	/*
	 * Method produces the result of a COUNT on a sql table given a SQL query string as a parameter 
	 */
	public int computeSumOf(String query) throws SQLException
	{
		Connection conn = dbUtil.getConnection();
		PreparedStatement ps = conn.prepareStatement(query);
		ResultSet set = ps.executeQuery();
		set.next();
		return set.getInt(1);
	}
	
	public ArrayList computeSumOfMultiVulnVcc() throws SQLException
	{
		ArrayList<Integer> multiVulnVcc = new ArrayList<Integer> ();
		Connection conn = dbUtil.getConnection();
		PreparedStatement ps = conn.prepareStatement("SELECT COUNT(DISTINCT CVE) FROM cvetogit WHERE CommitIntroduced != 'N/A' GROUP BY CommitIntroduced HAVING ( COUNT(CVE) > 1)");
		ResultSet set = ps.executeQuery();
		while(set.next())
		{
			multiVulnVcc.add(set.getInt(1));
		}
		return multiVulnVcc;
	}
	
	private DBUtil setUpDB(Properties props) throws ClassNotFoundException {
		Class.forName("com.mysql.jdbc.Driver");
		DBUtil dbUtil = new DBUtil(props.getProperty("history.dbuser"), props.getProperty("history.dbpw"),
				props.getProperty("history.dburl"));
		return dbUtil;
	}
	
	private Properties setUpProps() throws IOException {
		Properties props = PropsLoader.getProperties("httpdhistory.properties");
		DOMConfigurator.configure("log4j.properties.xml");
		datadir = new File(props.getProperty("history.datadir"));
		return props;
	}
}
