package edu.rit.se.history.httpd.analysis;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.log4j.Logger;
import org.chaoticbits.devactivity.DBUtil;

import com.mysql.jdbc.Connection;

/**
 * Class produces summary statistics of the VCC to CVE mappings. Those included are:
 * <ul>
 * <li>Average Time (in days) a vulnerability was open</li>
 * <li>Number of Vulnerabilities in sample</li>
 * <li>Number of VCCs in sample Number of VCCs that contributed to multiple vulnerabilities</li>
 * <li>Number of VCCs that were also fixes for another vulnerability</li>
 * </ul>
 * 
 * @author Brian Spates
 */
public class SumStatsVCC {
	private static Logger log = Logger.getLogger(SumStatsVCC.class);
	private final DBUtil dbUtil;
	private SummaryStatistics ss;

	public SumStatsVCC(DBUtil dbUtil) {
		this.dbUtil = dbUtil;
		this.ss = new SummaryStatistics();
	}

	public void compute() throws Exception {
		Connection conn = dbUtil.getConnection();
		// Query Strings to be passed to computeSumOf()
		String numOfRegresVccQ = "SELECT COUNT(DISTINCT a.CommitIntroduced) "
				+ "FROM cvetogit a JOIN cvetogit b WHERE a.CommitIntroduced = b.CommitFixed";
		String numOfVulnQ = "SELECT COUNT(DISTINCT CVE) FROM cvetogit";
		String numOfVccQ = "SELECT COUNT(CVE) FROM cvetogit WHERE CommitIntroduced != 'N/A' ";

		log.info("Time Vulnerable \n" + computeAvgTimeVulnerable());
		log.info("Number of VCCs that were fixes for other vulnerabilities " + computeSumOf(conn, numOfRegresVccQ));
		log.info("Total number of VCCs that contributed to multiple vulnerabilities "
				+ computeSumOfMultiVulnVcc(conn).size());
		log.info("Total number of CVEs in sample " + computeSumOf(conn, numOfVulnQ));
		log.info("Total number of VCCs in sample " + computeSumOf(conn, numOfVccQ));
	}

	/**
	 * Method returns the StatSummary object generated by SummaryStatistics class from apache commons
	 * 
	 * This includes mean, max, min, standard deviation, sample variance, and number.
	 */
	public StatisticalSummary computeAvgTimeVulnerable() throws Exception {
		Connection conn = dbUtil.getConnection();
		Statement statement = conn.createStatement();
		ResultSet commits = statement
				.executeQuery("SELECT DISTINCT CVE, CommitIntroduced, CommitFixed FROM cvetogit WHERE CommitIntroduced != 'N/A' GROUP BY CVE ORDER BY CVE");
		ResultSet rs;
		while (commits.next()) {
			PreparedStatement ps = conn
					.prepareStatement("SELECT TIMESTAMPDIFF(DAY, "
							+ "(SELECT AuthorDate FROM gitlog WHERE Commit = ?), (SELECT AuthorDate FROM gitlog WHERE Commit = ?))");
			ps.setString(1, commits.getString("CommitIntroduced"));
			ps.setString(2, commits.getString("CommitFixed"));

			rs = ps.executeQuery();
			rs.next();
			String temp = rs.getString(1);
			if (temp != null) {
				ss.addValue(Integer.parseInt(temp));
			}
		}

		return ss.getSummary();
	}

	/**
	 * Method produces the result of a COUNT on a sql table given a SQL query string as a parameter
	 */
	public int computeSumOf(Connection conn, String query) throws SQLException {
		PreparedStatement ps = conn.prepareStatement(query);
		ResultSet set = ps.executeQuery();
		set.next();
		return set.getInt(1);
	}

	public ArrayList<Integer> computeSumOfMultiVulnVcc(Connection conn) throws SQLException {
		ArrayList<Integer> multiVulnVcc = new ArrayList<Integer>();
		PreparedStatement ps = conn
				.prepareStatement("SELECT COUNT(DISTINCT CVE) FROM cvetogit WHERE CommitIntroduced != 'N/A' GROUP BY CommitIntroduced HAVING ( COUNT(CVE) > 1)");
		ResultSet set = ps.executeQuery();
		while (set.next()) {
			multiVulnVcc.add(set.getInt(1));
		}
		return multiVulnVcc;
	}

}
